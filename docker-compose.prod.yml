# Fichier docker-compose pour la production
# il faudra compléter la commande à éxécuter pour les fichers docker-compose.yml et docker-compose.prod.yml, l'un à la suite de l'autre
# Le fichier docker-compose.prod.yml est le fichier qui sera éxécuté en premier et contient la majorité de la configuration nécessaire
# la command sera comme suit: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# ici le -f représente le fichier à éxécuter

version: '3'
services:
  nginx:
    ports:
      - 80:80
  free-code-camp-app:
    build:
      # on précise le dossier où se trouve le dockerfile
      context: .
      # On précise l'argument à passer au dockerfile
      args:
        NODE_ENV: production
    # Les variables d'environnement seront définies depuis notre environnement de déploiement linux
    
    # Voici comment définir les variables d'environnement dans linux:
    # En mode root, tapez les commandes suivantes:
    # export MONGO_USER=your_mongo_user
    # export MONGO_PASSWORD=your_mongo_password
    # export SESSION_SECRET=your_session_secret
    # export MONGO_INITDB_ROOT_USERNAME=your_mongo_root_username
    # export MONGO_INITDB_ROOT_PASSWORD=your_mongo_root_password
    # Il est tout à fait possible de définir ces variables dans un fichier .env et de les charger depuis ce fichier dans notre serveur linux
    # Ne pas mettre ce ficher dans le même dossier de notre application afin d'éviter de le pousser sur github
    
    # Pour voir les variables d'environnement définies, tapez la commande suivante dans la cosole linux:
    # printenv
    environment:
      - NODE_ENV=production
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
    command: npm start

  mongo-db:
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

# Etapes pour pousser notre image sur docker hub
# 1- Créer un compte sur docker hub
# 2- Créer un repository sur docker hub
# 3- Se connecter à docker hub depuis la console linux en tapant la commande suivante:
# docker login
# 4- Taguer notre image avec le nom de notre repository sur docker hub en tapant la commande suivante:
# docker tag free-code-camp-app your_docker_hub_username/your_repository_name
# 5- Pousser notre image sur docker hub en tapant la commande suivante:
# docker push your_docker_hub_username/your_repository_name
# 6- Vérifier que notre image a bien été poussée sur docker hub en se connectant à notre compte sur docker hub
# 7- Pour récupérer notre image depuis docker hub, il suffit de taper la commande suivante:
# docker pull your_docker_hub_username/your_repository_name
